var Utils = require('../Utils'),
        config = require('../../config.json');

class Video {
    constructor(data) {

        data = (data) ? data : {};

        this._id;   // generated by Database

        this.videoNumber = data.videoNumber;    // number that is used in submissions
        this.filename = data.filename;
        this.numFrames = data.numFrames;
        this.fps = data.fps;

        // array of items in the form {from, to}
        // attention: Trecvid msb master shot reference is 1-based,
        // i.e., the first shot of a video has shotNumber=1
        // -> shots[0] corresponds to shotNumber=1
        this.shots = (Array.isArray(data.shots)) ? data.shots : new Array();

        // array of items in the form {_id, videoNumber} that are a duplicate of this video
        this.duplicates = (Array.isArray(data.duplicates)) ? data.duplicates : new Array();

    }

    static secondsToFrame(seconds, video) {
        if (!Utils.isNumber(seconds) || !Utils.isDefined(video)) {
            return -1;
        }
        return Math.round(seconds * video.fps);
    }

    static frameToSeconds(frame, video) {
        if (!Utils.isNumber(frame) || !Utils.isDefined(video)) {
            return -1;
        }
        return Utils.roundSeconds(frame / video.fps);
    }

    // the TRECVID shotNumber is 1-based!! but the shots array is 0-based (because it is an array...)
    static getShotBoundaries(shotNumber, video) {
        var shotIdx = shotNumber - 1;  // array is 0-based, but shotNumber is 1-based!
        if (shotIdx >= video.shots.length || !Utils.isDefined(video)) {
            return {
                startFrame: 0,
                endFrame: 0,
                startTime: 0,
                endTime: 0};
        }
        var startFrame = video.shots[shotIdx].from;
        var endFrame = video.shots[shotIdx].to;
        var startTime = startFrame / video.fps;
        var endTime = endFrame / video.fps;
        return {
            startFrame: startFrame,
            endFrame: endFrame,
            startTime: startTime,
            endTime: endTime};
    }

    static getPlaybackInfo(shotNumber, video) {
        if (!Utils.isDefined(video) || !Utils.isNumber(shotNumber)) {
            return {
                src: "",
                startTime: 0,
                endTime: 0};
        }
        var src = config.server.videoDir + "/" + video.filename;
        var boundaries = Video.getShotBoundaries(shotNumber, video);
        return {
            src: src,
            startTime: boundaries.startTime,
            endTime: boundaries.endTime};
    }

    // maps a frame position of a given video to the according master shot reference (msb) shotNumber
    // returns the one-based shotNumber of the according shot (or -1 if the input is invalid)
    static frameToTrecvidShotNumber(frame, video) {
        if (!Utils.isDefined(video) || !Utils.isNumber(frame) || frame < 0 || frame >= video.numFrames) {
            return -1;
        }
        var shotIdx = 0;
        while (frame > video.shots[shotIdx].to) {
            shotIdx++;
        }
        return shotIdx + 1; // the Trecvid master shot reference is one-based!!!
    }

    // returns the center frame of the given shotNumber  (or -1 if invalid)
    // attention: shotNumbers are 1-based!!
    static getShotCenterFrame(shotNumber, video) {
        if (!Utils.isDefined(video) || !Utils.isNumber(shotNumber) || shotNumber < 1 || shotNumber > video.shots.length) {
            return -1;
        }
        var shotIdx = shotNumber - 1;   // array is 0-based, but shotNumber is 1-based!
        var startFrame = video.shots[shotIdx].from;
        var endFrame = video.shots[shotIdx].to;
        return startFrame + Math.round((endFrame - startFrame) / 2);
    }

    static isValidShotNumber(shotNumber, video) {
        // again: trecvid shotNumbers are one-based!!
        return Utils.isDefined(video) && Utils.isNumber(shotNumber) && shotNumber > 0 && shotNumber <= video.shots.length;
    }

}

module.exports = Video;
